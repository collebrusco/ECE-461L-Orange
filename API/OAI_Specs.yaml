# Paste in https://editor.swagger.io/ to see what it looks like
openapi: 3.0.3
info:
  title: ECE_461L - OpenAPI
  description: |-
    This is the rough specifications for what our API will be doing
  version: 1.0.01
externalDocs:
  description: Google Drive Link
  url: https://drive.google.com/drive/u/2/folders/1R8sgbDksbZiwOycuF396ZUm8Dv0tAQy7
servers:
  - url: our_server_here.com
tags:
  - name: Projects
  - name: Users
    description: Operations about Users
  - name: Resources
    description: Operations about resources
paths:
  /users/profile:
    get:
      tags:
        - User
      summary: Find user by JWT
      description: Returns a single user
      operationId: getUserById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized. JWT Token is missing or invalid
      security:
        - JWTAuth: []
    put:
      tags:
        - Users
      summary: Update 
      description: Update an user by JWT Token
      operationId: updateUser
      requestBody:
        description: Update an existent User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '404':
          description: User not found
        '401':
          description: Unauthorized. JWT Token is missing or invalid
      security:
        - JWTAuth: []
  /users:  
    get:
      tags:
        - Users
      summary: Return list of all Users
      description: Returns all users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
        '401':
          description: Unauthorized. JWT Token is missing or invalid
      security:
        - JWTAuth: []
    post:
      tags:
        - Users
      summary: Add a new user
      description: Add a user
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid input
        '401':
          description: Unauthorized. JWT Token is missing or invalid
  /users/login:
    post:
      tags:
        - Users
      summary: Returns true if login correct with JWT corresponding
      description: Logs user in
      operationId: login
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
        '401':
          description: Unauthorized. JWT Token is missing or invalid
      security:
        - JWTAuth: []
  /users/logout:
    post:
      tags:
        - Users
      summary: Returns true if logout correct with JWT corresponding
      description: Logs user out
      operationId: logout
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
        '401':
          description: Unauthorized. JWT Token is missing or invalid
      security:
        - JWTAuth: []
  /projects:
    get:
      tags:
        - Projects
      summary: Project list
      description: receive a list of projects of the user.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Projects'
        '401':
          description: Unauthorized. JWT token is missing or invalid.
  /resources:
    get:
      tags:
        - Resources
      summary: Resource list of all users
      description: receive a list of resources.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '401':
          description: Unauthorized. JWT token is missing or invalid.
  /resources/{resource_id}/checkin:
    post:
      tags:
        - Resources
      summary: Checks in specified amount of resource
      parameters:
        - name: resource_id
          in: path
          description: ID of resource to checkin
          required: true
          schema:
            type: integer
            format: int64
        - name: amount
          in: query
          description: amount of resources to checkin
          required: true
          schema:
            type: integer
      description: check specified amount of resources in
      security:
        - JWTAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          description: Invalid request, tried to check in too many or illegal value
        '401':
          description: Unauthorized. JWT token is missing or invalid.
        '404': 
          description: Resource not found
  /resources/{resource_id}/checkout:
    post:
      tags:
        - Resources
      summary: Checks out specified amount of resource
      parameters:
        - name: resource_id
          in: path
          description: ID of resource to checkout
          required: true
          schema:
            type: integer
            format: int64
        - name: amount
          in: query
          description: amount of resources to checkout
          required: true
          schema:
            type: integer
      description: check specified amount of resources out
      security:
        - JWTAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          description: Invalid request, tried to check out too many or illegal value
        '401':
          description: Unauthorized. JWT token is missing or invalid.
        '404': 
          description: Resource not found
  /resource/{userId}:
    get:
      tags:
        - Resources
      summary: Resource list of specified user
      parameters:
        - name: userId
          in: path
          description: ID of user to return their resources
          required: true
          schema:
            type: integer
            format: int64
      description: receive a list of resources of the user.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '401':
          description: Unauthorized. JWT token is missing or invalid.
components:
  schemas:
    Resource:
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 10
        capacity:
          type: integer
          example: 100
        availability:
          type: integer
          example: 30
        title:
          type: string
        type:
          type: string
          enum:
            - type1
            - type2
        created_at:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z" # https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
    Projects:
      required:
        - id
        - title
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Project 1
        description:
          type: string
        user_ids:
          type: array
          example: [1, 2, 3]
        creator:
          type: integer
          description: User id of Creator
          format: int64
          example: 10
        resources:
          type: array
          description: array of resource ids
          example: [1, 3, 8]
    User:
      required:
        - name
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: spenc
        password:
          type: string
        created_at:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z" # https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
        project_ids:
          type: array
          items:
            $ref: '#/components/schemas/Projects'
  requestBodies:
    User:
      description: User object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  securitySchemes:
    JWTAuth:
      type: apiKey
      in: cookie
      name: JWT